import Head from 'next/head';
import styles from '@/styles/Home.module.css';
import Card from '@/components/Card';
import { IPokemonGenericInformation } from '@/types';
import { fetchPokemons } from '@/utils';
import { IPokemonContext, usePokemonContext } from '@/context/pokemons';

interface IHomeProps {
  pokemons: IPokemonGenericInformation[];
}

// export async function getStaticPaths() {

  // no need to call api under pokemon details page: we know how many pokemons there are!
  // const paths = [1, 2, 3, ..., 666].map((number) => ({
    //   params: { id: number },
    // }))
  // this will do!

  // // Call an external API endpoint to get posts
  // const res = await fetch('https://.../posts')
  // const posts = await res.json()
 
  // // Get the paths we want to pre-render based on posts
  // const paths = posts.map((post) => ({
  //   params: { id: post.id },
  // }))
 
  // // We'll pre-render only these paths at build time.
  // // { fallback: false } means other routes should 404.
  // return { paths, fallback: false }
// }

export async function getStaticProps() {
  const pokemons = await fetchPokemons(0, 150);
  return {
    props: {
      pokemons,
    },
  };
}

export default function Home({ pokemons }: IHomeProps) {
  const { pokemons: newPokemons, isLoading, loadMorePokemons } = usePokemonContext() as IPokemonContext;
  const pokemonsList = [...pokemons, ...newPokemons];
  return (
    <>
      <Head>
        <title>PokeNext</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <div className={styles.mainContentWrapper}>
          {pokemonsList.map(pokemon => (
            <div className={styles.cardWrapper} key={pokemon.id}>
              <Card
                name={pokemon.name}
                imageUrl={pokemon.imageUrl}
                animationUrl={pokemon.animationUrl}
                id={pokemon.id}
              />
            </div>
          ))}
        </div>
        <div className={styles.buttonContainer}>
          <button
            disabled={isLoading}
            onClick={() => loadMorePokemons()}
          >
            Load more
          </button>
        </div>
      </main>
    </>
  )
}
